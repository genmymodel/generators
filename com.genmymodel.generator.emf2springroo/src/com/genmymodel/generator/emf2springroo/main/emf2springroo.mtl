[comment encoding = UTF-8 /]
[**
 * Emf2springroo generator by GenMyModel - http://www.genmymodel.com
 * Emf2springroo generates SpringRoo commands from an Ecore model.
 * In SpringRoo, the commands allow to generate Java code, configuration 
 * files or full web mvc applications. 
 * 
 * Last modification date: 20/12/2012
 * 
 * Author: Tom
 */]
[module emf2springroo('http://www.eclipse.org/emf/2002/Ecore')]


[**
 * The entry point on the template
 * @param anEPackage
 */]
[template public main(anEPackage : EPackage)]
[comment @main/]
[setup()/]
[entities()/]
[webmvc()/]
[/template]

[template public setup(m : EPackage)]
[file ('setup.roo', false, 'UTF-8')]
project --topLevelPackage [m.fullName()/] --projectName [m.name/]

[comment H2 is set as an example /]
jpa setup --provider HIBERNATE --database HYPERSONIC_IN_MEMORY

logging setup --level INFO

[/file]
[/template]

[template public entities(m : EPackage)]
[file ('entities.roo', false, 'UTF-8')]

# Entities and attributes
[m.eAllContents(EEnum).gen()/]
[m.eAllContents(EClass).gen()/]

# References (relations between entities)
[m.eAllContents(EClass).referencegen()/]

[/file]
[/template]

[template public webmvc(p : EPackage)]
[file ('webmvc.roo', false, 'UTF-8')]

web mvc setup
web mvc all --package ~.web
web mvc finder all

web mvc language --code en

[/file]
[/template]

[template public gen(cl : EClass)]
entity jpa --class ~.domain.[cl.name/] --sequenceName [cl.name.toUpper()/]_SEQ[if (cl.eSuperTypes->notEmpty())] --extends ~.domain.[cl.eSuperTypes->first().name/][/if]
[cl.eAttributes.gen()/]
[/template]

[template public referencegen(cl : EClass)]
[cl.eReferences.reference()/]
[/template]

[template public gen(att : EAttribute)]
field [att.eType.typeKind()/] --fieldName [att.name/][att.eType.fieldType()/][if (att.lowerBound > 0)] --notNull[/if]

[/template]

[template public reference(ref : EReference) ? (upperBound = 1 and (ref.containment or isOppositeOne())  ) ]
field reference --fieldName [ref.name/] --type [ref.eType.name/] --class  ~.domain.[ref.eContainingClass.name/] --cardinality ONE_TO_ONE

[/template]

[template public reference(ref : EReference) ? (upperBound = 1 and not ref.containment and not isOppositeOne()) ]
field reference --fieldName [ref.name/] --type [ref.eType.name/] --class  ~.domain.[ref.eContainingClass.name/] --cardinality MANY_TO_ONE

[/template]

[template public reference(ref : EReference) ? (upperBound > 1 and (ref.containment or isOppositeOne()) ) ]
field set --fieldName [ref.name/] --type [ref.eType.name/] --class  ~.domain.[ref.eContainingClass.name/] --cardinality ONE_TO_MANY

[/template]

[template public reference(ref : EReference) ? (upperBound > 1 and not ref.containment and not isOppositeOne()) ]
field set --fieldName [ref.name/] --type [ref.eType.name/] --class  ~.domain.[ref.eContainingClass.name/] --cardinality MANY_TO_MANY

[/template]

[template public cardinality(ref : EReference)]
[if ref.upperBound > 1 ]
--cardinality MANY_TO_ONE
[else]
--cardinality ONE_TO_ONE
[/if]
[/template]

[template public gen(enum : EEnum)]
enum type --class ~.reference.[enum.name/]
[enum.eLiterals.gen()/]
[/template]

[template public gen(el : EEnumLiteral)]
enum constant --name [el.name/]

[/template]

[template public typeKind(t : EClassifier) post (replaceAll('\n', '').trim())]
[if (t.name = 'EString')]
string
[elseif (t.oclIsKindOf(EEnum))]
enum
[elseif (t.name = 'EInt' or t.name = 'EDouble')]
number
[elseif (t.name = 'EBoolean')]
boolean
[else]
other
[/if]
[/template]

[template public fieldType(t : EClassifier) post (replaceAll('\n', ''))]
[if (t.name = 'EString')]
[elseif (t.oclIsKindOf(EEnum))]
 --type ~.reference.[t.name/] 
[elseif (t.name = 'EInt')]
 --type java.lang.Integer --primitive
[elseif (t.name = 'EDouble')]
 --type java.lang.Double --primitive
[elseif (t.name = 'EBoolean')]
[else]
 --type [t.instanceTypeName/] 
[/if]
[/template]

[template public fullName(p : EPackage)]
[if (eSuperPackage <> null)][eSuperPackage.fullName()/].[/if][if nsPrefix <> null][nsPrefix/].[/if][name/]
[/template]

[template public fullName (n : EClassifier)]
[if (ePackage <> null)][ePackage.fullName()/].[/if][name/]
[/template]

[comment Experimental /]
[template public clouddeployconf(m : EPackage)]
[file ('deploy_cloudfoundry.roo', false, 'UTF-8')]
pgp automatic trust
cloud foundry login --email you@email.com --password XXX --cloudControllerUrl http://api.cloudfoundry.com
cloud foundry deploy --appName [m.name.toLower()/] --path CREATE
cloud foundry start app --appName [m.name.toLower()/]
[/file]
[/template]

[query public isManyToMany(r : EReference) : Boolean = 
					r.upperBound > 1 and not r.eOpposite.oclIsUndefined() and r.eOpposite.upperBound > 1
/]

[query public isOppositeOne(r : EReference) : Boolean = 
					not r.eOpposite.oclIsUndefined() and r.eOpposite.upperBound <= 1
/]
